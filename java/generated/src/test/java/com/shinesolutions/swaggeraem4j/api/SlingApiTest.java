/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 1.1.6
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraem4j.api;

import com.shinesolutions.swaggeraem4j.ApiException;
import java.math.BigDecimal;
import java.io.File;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SlingApi
 */
@Ignore
public class SlingApiTest {

    private final SlingApi api = new SlingApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAgentTest() throws ApiException {
        String runmode = null;
        String name = null;
        api.deleteAgent(runmode, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeTest() throws ApiException {
        String path = null;
        String name = null;
        api.deleteNode(path, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentTest() throws ApiException {
        String runmode = null;
        String name = null;
        api.getAgent(runmode, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeTest() throws ApiException {
        String path = null;
        String name = null;
        api.getNode(path, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackageTest() throws ApiException {
        String group = null;
        String name = null;
        String version = null;
        File response = api.getPackage(group, name, version);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackageFilterTest() throws ApiException {
        String group = null;
        String name = null;
        String version = null;
        String response = api.getPackageFilter(group, name, version);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAgentTest() throws ApiException {
        String runmode = null;
        String name = null;
        String jcrprimaryType = null;
        String jcrcontentcqname = null;
        String jcrcontentjcrtitle = null;
        String jcrcontentjcrdescription = null;
        String jcrcontentslingresourceType = null;
        String jcrcontenttransportUri = null;
        String jcrcontenttransportUser = null;
        String jcrcontenttransportPassword = null;
        String jcrcontentlogLevel = null;
        Boolean jcrcontentnoVersioning = null;
        List<String> jcrcontentprotocolHTTPHeaders = null;
        String jcrcontentprotocolHTTPHeadersTypeHint = null;
        String jcrcontentprotocolHTTPMethod = null;
        String jcrcontentretryDelay = null;
        String jcrcontentserializationType = null;
        String jcrcontentjcrmixinTypes = null;
        Boolean jcrcontenttriggerReceive = null;
        Boolean jcrcontenttriggerSpecific = null;
        String jcrcontentcqtemplate = null;
        Boolean jcrcontentenabled = null;
        Boolean jcrcontentreverseReplication = null;
        String operation = null;
        api.postAgent(runmode, name, jcrprimaryType, jcrcontentcqname, jcrcontentjcrtitle, jcrcontentjcrdescription, jcrcontentslingresourceType, jcrcontenttransportUri, jcrcontenttransportUser, jcrcontenttransportPassword, jcrcontentlogLevel, jcrcontentnoVersioning, jcrcontentprotocolHTTPHeaders, jcrcontentprotocolHTTPHeadersTypeHint, jcrcontentprotocolHTTPMethod, jcrcontentretryDelay, jcrcontentserializationType, jcrcontentjcrmixinTypes, jcrcontenttriggerReceive, jcrcontenttriggerSpecific, jcrcontentcqtemplate, jcrcontentenabled, jcrcontentreverseReplication, operation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAuthorizablesTest() throws ApiException {
        String authorizableId = null;
        String intermediatePath = null;
        String createUser = null;
        String createGroup = null;
        String reppassword = null;
        String profilegivenName = null;
        String response = api.postAuthorizables(authorizableId, intermediatePath, createUser, createGroup, reppassword, profilegivenName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConfigApacheFelixJettyBasedHttpServiceTest() throws ApiException {
        String runmode = null;
        Boolean orgApacheFelixHttpsNio = null;
        String orgApacheFelixHttpsNioTypeHint = null;
        String orgApacheFelixHttpsKeystore = null;
        String orgApacheFelixHttpsKeystoreTypeHint = null;
        String orgApacheFelixHttpsKeystorePassword = null;
        String orgApacheFelixHttpsKeystorePasswordTypeHint = null;
        String orgApacheFelixHttpsKeystoreKey = null;
        String orgApacheFelixHttpsKeystoreKeyTypeHint = null;
        String orgApacheFelixHttpsKeystoreKeyPassword = null;
        String orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = null;
        String orgApacheFelixHttpsTruststore = null;
        String orgApacheFelixHttpsTruststoreTypeHint = null;
        String orgApacheFelixHttpsTruststorePassword = null;
        String orgApacheFelixHttpsTruststorePasswordTypeHint = null;
        String orgApacheFelixHttpsClientcertificate = null;
        String orgApacheFelixHttpsClientcertificateTypeHint = null;
        Boolean orgApacheFelixHttpsEnable = null;
        String orgApacheFelixHttpsEnableTypeHint = null;
        String orgOsgiServiceHttpPortSecure = null;
        String orgOsgiServiceHttpPortSecureTypeHint = null;
        api.postConfigApacheFelixJettyBasedHttpService(runmode, orgApacheFelixHttpsNio, orgApacheFelixHttpsNioTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureTypeHint);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConfigApacheSlingDavExServletTest() throws ApiException {
        String runmode = null;
        String alias = null;
        String aliasTypeHint = null;
        Boolean davCreateAbsoluteUri = null;
        String davCreateAbsoluteUriTypeHint = null;
        api.postConfigApacheSlingDavExServlet(runmode, alias, aliasTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriTypeHint);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConfigApacheSlingGetServletTest() throws ApiException {
        String runmode = null;
        String jsonMaximumresults = null;
        String jsonMaximumresultsTypeHint = null;
        Boolean enableHtml = null;
        String enableHtmlTypeHint = null;
        Boolean enableTxt = null;
        String enableTxtTypeHint = null;
        Boolean enableXml = null;
        String enableXmlTypeHint = null;
        api.postConfigApacheSlingGetServlet(runmode, jsonMaximumresults, jsonMaximumresultsTypeHint, enableHtml, enableHtmlTypeHint, enableTxt, enableTxtTypeHint, enableXml, enableXmlTypeHint);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConfigApacheSlingReferrerFilterTest() throws ApiException {
        String runmode = null;
        Boolean allowEmpty = null;
        String allowEmptyTypeHint = null;
        String allowHosts = null;
        String allowHostsTypeHint = null;
        String allowHostsRegexp = null;
        String allowHostsRegexpTypeHint = null;
        api.postConfigApacheSlingReferrerFilter(runmode, allowEmpty, allowEmptyTypeHint, allowHosts, allowHostsTypeHint, allowHostsRegexp, allowHostsRegexpTypeHint);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNodeRwTest() throws ApiException {
        String path = null;
        String name = null;
        String addMembers = null;
        api.postNodeRw(path, name, addMembers);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPathTest() throws ApiException {
        String path = null;
        String jcrprimaryType = null;
        String name = null;
        api.postPath(path, jcrprimaryType, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postQueryTest() throws ApiException {
        String path = null;
        BigDecimal pLimit = null;
        String _1Property = null;
        String _1PropertyValue = null;
        String response = api.postQuery(path, pLimit, _1Property, _1PropertyValue);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTreeActivationTest() throws ApiException {
        Boolean ignoredeactivated = null;
        Boolean onlymodified = null;
        String path = null;
        api.postTreeActivation(ignoredeactivated, onlymodified, path);

        // TODO: test validations
    }
    
}
