/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 1.1.1
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.shinesolutions.swaggeraem4j.api;

import com.shinesolutions.swaggeraem4j.ApiCallback;
import com.shinesolutions.swaggeraem4j.ApiClient;
import com.shinesolutions.swaggeraem4j.ApiException;
import com.shinesolutions.swaggeraem4j.ApiResponse;
import com.shinesolutions.swaggeraem4j.Configuration;
import com.shinesolutions.swaggeraem4j.Pair;
import com.shinesolutions.swaggeraem4j.ProgressRequestBody;
import com.shinesolutions.swaggeraem4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.io.File;
import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SlingApi {
    private ApiClient apiClient;

    public SlingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SlingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteAgent */
    private com.squareup.okhttp.Call deleteAgentCall(String runmode, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling deleteAgent(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAgent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}/{name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "runmode" + "\\}", apiClient.escapeString(runmode.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAgent(String runmode, String name) throws ApiException {
        deleteAgentWithHttpInfo(runmode, name);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAgentWithHttpInfo(String runmode, String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteAgentCall(runmode, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAgentAsync(String runmode, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAgentCall(runmode, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteNode */
    private com.squareup.okhttp.Call deleteNodeCall(String path, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteNode(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNode(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/{path}/{name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNode(String path, String name) throws ApiException {
        deleteNodeWithHttpInfo(path, name);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNodeWithHttpInfo(String path, String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteNodeCall(path, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNodeAsync(String path, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNodeCall(path, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getAgent */
    private com.squareup.okhttp.Call getAgentCall(String runmode, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling getAgent(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getAgent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}/{name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "runmode" + "\\}", apiClient.escapeString(runmode.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAgent(String runmode, String name) throws ApiException {
        getAgentWithHttpInfo(runmode, name);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAgentWithHttpInfo(String runmode, String name) throws ApiException {
        com.squareup.okhttp.Call call = getAgentCall(runmode, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentAsync(String runmode, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentCall(runmode, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getNode */
    private com.squareup.okhttp.Call getNodeCall(String path, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getNode(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNode(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/{path}/{name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getNode(String path, String name) throws ApiException {
        getNodeWithHttpInfo(path, name);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getNodeWithHttpInfo(String path, String name) throws ApiException {
        com.squareup.okhttp.Call call = getNodeCall(path, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeAsync(String path, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeCall(path, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getPackage */
    private com.squareup.okhttp.Call getPackageCall(String group, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getPackage(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/etc/packages/{group}/{name}-{version}.zip".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPackage(String group, String name, String version) throws ApiException {
        ApiResponse<File> resp = getPackageWithHttpInfo(group, name, version);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPackageWithHttpInfo(String group, String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = getPackageCall(group, name, version, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackageAsync(String group, String name, String version, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackageCall(group, name, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPackageFilter */
    private com.squareup.okhttp.Call getPackageFilterCall(String group, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getPackageFilter(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPackageFilter(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getPackageFilter(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getPackageFilter(String group, String name, String version) throws ApiException {
        ApiResponse<String> resp = getPackageFilterWithHttpInfo(group, name, version);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getPackageFilterWithHttpInfo(String group, String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = getPackageFilterCall(group, name, version, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackageFilterAsync(String group, String name, String version, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackageFilterCall(group, name, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postAgent */
    private com.squareup.okhttp.Call postAgentCall(String runmode, String name, String jcrprimaryType, String jcrcontentcqname, String jcrcontentjcrtitle, String jcrcontentjcrdescription, String jcrcontentslingresourceType, String jcrcontenttransportUri, String jcrcontenttransportUser, String jcrcontenttransportPassword, String jcrcontentlogLevel, Boolean jcrcontentnoVersioning, List<String> jcrcontentprotocolHTTPHeaders, String jcrcontentprotocolHTTPHeadersTypeHint, String jcrcontentprotocolHTTPMethod, String jcrcontentretryDelay, String jcrcontentserializationType, String jcrcontentjcrmixinTypes, Boolean jcrcontenttriggerReceive, Boolean jcrcontenttriggerSpecific, String jcrcontentcqtemplate, Boolean jcrcontentenabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling postAgent(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAgent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}/{name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "runmode" + "\\}", apiClient.escapeString(runmode.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (jcrprimaryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:primaryType", jcrprimaryType));
        if (jcrcontentcqname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/cq:name", jcrcontentcqname));
        if (jcrcontentjcrtitle != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/jcr:title", jcrcontentjcrtitle));
        if (jcrcontentjcrdescription != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/jcr:description", jcrcontentjcrdescription));
        if (jcrcontentslingresourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/sling:resourceType", jcrcontentslingresourceType));
        if (jcrcontenttransportUri != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/transportUri", jcrcontenttransportUri));
        if (jcrcontenttransportUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/transportUser", jcrcontenttransportUser));
        if (jcrcontenttransportPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/transportPassword", jcrcontenttransportPassword));
        if (jcrcontentlogLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/logLevel", jcrcontentlogLevel));
        if (jcrcontentnoVersioning != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/noVersioning", jcrcontentnoVersioning));
        if (jcrcontentprotocolHTTPHeaders != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "jcr:content/protocolHTTPHeaders", jcrcontentprotocolHTTPHeaders));
        if (jcrcontentprotocolHTTPHeadersTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/protocolHTTPHeaders@TypeHint", jcrcontentprotocolHTTPHeadersTypeHint));
        if (jcrcontentprotocolHTTPMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/protocolHTTPMethod", jcrcontentprotocolHTTPMethod));
        if (jcrcontentretryDelay != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/retryDelay", jcrcontentretryDelay));
        if (jcrcontentserializationType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/serializationType", jcrcontentserializationType));
        if (jcrcontentjcrmixinTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/jcr:mixinTypes", jcrcontentjcrmixinTypes));
        if (jcrcontenttriggerReceive != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/triggerReceive", jcrcontenttriggerReceive));
        if (jcrcontenttriggerSpecific != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/triggerSpecific", jcrcontenttriggerSpecific));
        if (jcrcontentcqtemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/cq:template", jcrcontentcqtemplate));
        if (jcrcontentenabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:content/enabled", jcrcontentenabled));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrprimaryType  (optional)
     * @param jcrcontentcqname  (optional)
     * @param jcrcontentjcrtitle  (optional)
     * @param jcrcontentjcrdescription  (optional)
     * @param jcrcontentslingresourceType  (optional)
     * @param jcrcontenttransportUri  (optional)
     * @param jcrcontenttransportUser  (optional)
     * @param jcrcontenttransportPassword  (optional)
     * @param jcrcontentlogLevel  (optional)
     * @param jcrcontentnoVersioning  (optional)
     * @param jcrcontentprotocolHTTPHeaders  (optional)
     * @param jcrcontentprotocolHTTPHeadersTypeHint  (optional)
     * @param jcrcontentprotocolHTTPMethod  (optional)
     * @param jcrcontentretryDelay  (optional)
     * @param jcrcontentserializationType  (optional)
     * @param jcrcontentjcrmixinTypes  (optional)
     * @param jcrcontenttriggerReceive  (optional)
     * @param jcrcontenttriggerSpecific  (optional)
     * @param jcrcontentcqtemplate  (optional)
     * @param jcrcontentenabled  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postAgent(String runmode, String name, String jcrprimaryType, String jcrcontentcqname, String jcrcontentjcrtitle, String jcrcontentjcrdescription, String jcrcontentslingresourceType, String jcrcontenttransportUri, String jcrcontenttransportUser, String jcrcontenttransportPassword, String jcrcontentlogLevel, Boolean jcrcontentnoVersioning, List<String> jcrcontentprotocolHTTPHeaders, String jcrcontentprotocolHTTPHeadersTypeHint, String jcrcontentprotocolHTTPMethod, String jcrcontentretryDelay, String jcrcontentserializationType, String jcrcontentjcrmixinTypes, Boolean jcrcontenttriggerReceive, Boolean jcrcontenttriggerSpecific, String jcrcontentcqtemplate, Boolean jcrcontentenabled) throws ApiException {
        postAgentWithHttpInfo(runmode, name, jcrprimaryType, jcrcontentcqname, jcrcontentjcrtitle, jcrcontentjcrdescription, jcrcontentslingresourceType, jcrcontenttransportUri, jcrcontenttransportUser, jcrcontenttransportPassword, jcrcontentlogLevel, jcrcontentnoVersioning, jcrcontentprotocolHTTPHeaders, jcrcontentprotocolHTTPHeadersTypeHint, jcrcontentprotocolHTTPMethod, jcrcontentretryDelay, jcrcontentserializationType, jcrcontentjcrmixinTypes, jcrcontenttriggerReceive, jcrcontenttriggerSpecific, jcrcontentcqtemplate, jcrcontentenabled);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrprimaryType  (optional)
     * @param jcrcontentcqname  (optional)
     * @param jcrcontentjcrtitle  (optional)
     * @param jcrcontentjcrdescription  (optional)
     * @param jcrcontentslingresourceType  (optional)
     * @param jcrcontenttransportUri  (optional)
     * @param jcrcontenttransportUser  (optional)
     * @param jcrcontenttransportPassword  (optional)
     * @param jcrcontentlogLevel  (optional)
     * @param jcrcontentnoVersioning  (optional)
     * @param jcrcontentprotocolHTTPHeaders  (optional)
     * @param jcrcontentprotocolHTTPHeadersTypeHint  (optional)
     * @param jcrcontentprotocolHTTPMethod  (optional)
     * @param jcrcontentretryDelay  (optional)
     * @param jcrcontentserializationType  (optional)
     * @param jcrcontentjcrmixinTypes  (optional)
     * @param jcrcontenttriggerReceive  (optional)
     * @param jcrcontenttriggerSpecific  (optional)
     * @param jcrcontentcqtemplate  (optional)
     * @param jcrcontentenabled  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postAgentWithHttpInfo(String runmode, String name, String jcrprimaryType, String jcrcontentcqname, String jcrcontentjcrtitle, String jcrcontentjcrdescription, String jcrcontentslingresourceType, String jcrcontenttransportUri, String jcrcontenttransportUser, String jcrcontenttransportPassword, String jcrcontentlogLevel, Boolean jcrcontentnoVersioning, List<String> jcrcontentprotocolHTTPHeaders, String jcrcontentprotocolHTTPHeadersTypeHint, String jcrcontentprotocolHTTPMethod, String jcrcontentretryDelay, String jcrcontentserializationType, String jcrcontentjcrmixinTypes, Boolean jcrcontenttriggerReceive, Boolean jcrcontenttriggerSpecific, String jcrcontentcqtemplate, Boolean jcrcontentenabled) throws ApiException {
        com.squareup.okhttp.Call call = postAgentCall(runmode, name, jcrprimaryType, jcrcontentcqname, jcrcontentjcrtitle, jcrcontentjcrdescription, jcrcontentslingresourceType, jcrcontenttransportUri, jcrcontenttransportUser, jcrcontenttransportPassword, jcrcontentlogLevel, jcrcontentnoVersioning, jcrcontentprotocolHTTPHeaders, jcrcontentprotocolHTTPHeadersTypeHint, jcrcontentprotocolHTTPMethod, jcrcontentretryDelay, jcrcontentserializationType, jcrcontentjcrmixinTypes, jcrcontenttriggerReceive, jcrcontenttriggerSpecific, jcrcontentcqtemplate, jcrcontentenabled, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrprimaryType  (optional)
     * @param jcrcontentcqname  (optional)
     * @param jcrcontentjcrtitle  (optional)
     * @param jcrcontentjcrdescription  (optional)
     * @param jcrcontentslingresourceType  (optional)
     * @param jcrcontenttransportUri  (optional)
     * @param jcrcontenttransportUser  (optional)
     * @param jcrcontenttransportPassword  (optional)
     * @param jcrcontentlogLevel  (optional)
     * @param jcrcontentnoVersioning  (optional)
     * @param jcrcontentprotocolHTTPHeaders  (optional)
     * @param jcrcontentprotocolHTTPHeadersTypeHint  (optional)
     * @param jcrcontentprotocolHTTPMethod  (optional)
     * @param jcrcontentretryDelay  (optional)
     * @param jcrcontentserializationType  (optional)
     * @param jcrcontentjcrmixinTypes  (optional)
     * @param jcrcontenttriggerReceive  (optional)
     * @param jcrcontenttriggerSpecific  (optional)
     * @param jcrcontentcqtemplate  (optional)
     * @param jcrcontentenabled  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAgentAsync(String runmode, String name, String jcrprimaryType, String jcrcontentcqname, String jcrcontentjcrtitle, String jcrcontentjcrdescription, String jcrcontentslingresourceType, String jcrcontenttransportUri, String jcrcontenttransportUser, String jcrcontenttransportPassword, String jcrcontentlogLevel, Boolean jcrcontentnoVersioning, List<String> jcrcontentprotocolHTTPHeaders, String jcrcontentprotocolHTTPHeadersTypeHint, String jcrcontentprotocolHTTPMethod, String jcrcontentretryDelay, String jcrcontentserializationType, String jcrcontentjcrmixinTypes, Boolean jcrcontenttriggerReceive, Boolean jcrcontenttriggerSpecific, String jcrcontentcqtemplate, Boolean jcrcontentenabled, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAgentCall(runmode, name, jcrprimaryType, jcrcontentcqname, jcrcontentjcrtitle, jcrcontentjcrdescription, jcrcontentslingresourceType, jcrcontenttransportUri, jcrcontenttransportUser, jcrcontenttransportPassword, jcrcontentlogLevel, jcrcontentnoVersioning, jcrcontentprotocolHTTPHeaders, jcrcontentprotocolHTTPHeadersTypeHint, jcrcontentprotocolHTTPMethod, jcrcontentretryDelay, jcrcontentserializationType, jcrcontentjcrmixinTypes, jcrcontenttriggerReceive, jcrcontenttriggerSpecific, jcrcontentcqtemplate, jcrcontentenabled, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for postAuthorizables */
    private com.squareup.okhttp.Call postAuthorizablesCall(String authorizableId, String intermediatePath, String createUser, String createGroup, String reppassword, String profilegivenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorizableId' is set
        if (authorizableId == null) {
            throw new ApiException("Missing the required parameter 'authorizableId' when calling postAuthorizables(Async)");
        }
        
        // verify the required parameter 'intermediatePath' is set
        if (intermediatePath == null) {
            throw new ApiException("Missing the required parameter 'intermediatePath' when calling postAuthorizables(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/libs/granite/security/post/authorizables".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authorizableId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authorizableId", authorizableId));
        if (intermediatePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "intermediatePath", intermediatePath));
        if (createUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "createUser", createUser));
        if (createGroup != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "createGroup", createGroup));
        if (reppassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rep:password", reppassword));
        if (profilegivenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "profile/givenName", profilegivenName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param reppassword  (optional)
     * @param profilegivenName  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String postAuthorizables(String authorizableId, String intermediatePath, String createUser, String createGroup, String reppassword, String profilegivenName) throws ApiException {
        ApiResponse<String> resp = postAuthorizablesWithHttpInfo(authorizableId, intermediatePath, createUser, createGroup, reppassword, profilegivenName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param reppassword  (optional)
     * @param profilegivenName  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> postAuthorizablesWithHttpInfo(String authorizableId, String intermediatePath, String createUser, String createGroup, String reppassword, String profilegivenName) throws ApiException {
        com.squareup.okhttp.Call call = postAuthorizablesCall(authorizableId, intermediatePath, createUser, createGroup, reppassword, profilegivenName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param reppassword  (optional)
     * @param profilegivenName  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAuthorizablesAsync(String authorizableId, String intermediatePath, String createUser, String createGroup, String reppassword, String profilegivenName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAuthorizablesCall(authorizableId, intermediatePath, createUser, createGroup, reppassword, profilegivenName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postConfig */
    private com.squareup.okhttp.Call postConfigCall(String runmode, String name, Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateTypeHint, String orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling postConfig(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postConfig(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/apps/system/config.{runmode}/{name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "runmode" + "\\}", apiClient.escapeString(runmode.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (orgApacheFelixHttpsNio != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.nio", orgApacheFelixHttpsNio));
        if (orgApacheFelixHttpsNioTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.nio@TypeHint", orgApacheFelixHttpsNioTypeHint));
        if (orgApacheFelixHttpsKeystore != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.keystore", orgApacheFelixHttpsKeystore));
        if (orgApacheFelixHttpsKeystoreTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.keystore@TypeHint", orgApacheFelixHttpsKeystoreTypeHint));
        if (orgApacheFelixHttpsKeystorePassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.keystore.password", orgApacheFelixHttpsKeystorePassword));
        if (orgApacheFelixHttpsKeystorePasswordTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.keystore.password@TypeHint", orgApacheFelixHttpsKeystorePasswordTypeHint));
        if (orgApacheFelixHttpsKeystoreKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.keystore.key", orgApacheFelixHttpsKeystoreKey));
        if (orgApacheFelixHttpsKeystoreKeyTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.keystore.key@TypeHint", orgApacheFelixHttpsKeystoreKeyTypeHint));
        if (orgApacheFelixHttpsKeystoreKeyPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.keystore.key.password", orgApacheFelixHttpsKeystoreKeyPassword));
        if (orgApacheFelixHttpsKeystoreKeyPasswordTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.keystore.key.password@TypeHint", orgApacheFelixHttpsKeystoreKeyPasswordTypeHint));
        if (orgApacheFelixHttpsTruststore != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.truststore", orgApacheFelixHttpsTruststore));
        if (orgApacheFelixHttpsTruststoreTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.truststore@TypeHint", orgApacheFelixHttpsTruststoreTypeHint));
        if (orgApacheFelixHttpsTruststorePassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.truststore.password", orgApacheFelixHttpsTruststorePassword));
        if (orgApacheFelixHttpsTruststorePasswordTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.truststore.password@TypeHint", orgApacheFelixHttpsTruststorePasswordTypeHint));
        if (orgApacheFelixHttpsClientcertificate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.clientcertificate", orgApacheFelixHttpsClientcertificate));
        if (orgApacheFelixHttpsClientcertificateTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.clientcertificate@TypeHint", orgApacheFelixHttpsClientcertificateTypeHint));
        if (orgApacheFelixHttpsEnable != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.enable", orgApacheFelixHttpsEnable));
        if (orgApacheFelixHttpsEnableTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.apache.felix.https.enable@TypeHint", orgApacheFelixHttpsEnableTypeHint));
        if (orgOsgiServiceHttpPortSecure != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.osgi.service.http.port.secure", orgOsgiServiceHttpPortSecure));
        if (orgOsgiServiceHttpPortSecureTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "org.osgi.service.http.port.secure@TypeHint", orgOsgiServiceHttpPortSecureTypeHint));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postConfig(String runmode, String name, Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateTypeHint, String orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureTypeHint) throws ApiException {
        postConfigWithHttpInfo(runmode, name, orgApacheFelixHttpsNio, orgApacheFelixHttpsNioTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureTypeHint);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postConfigWithHttpInfo(String runmode, String name, Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateTypeHint, String orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureTypeHint) throws ApiException {
        com.squareup.okhttp.Call call = postConfigCall(runmode, name, orgApacheFelixHttpsNio, orgApacheFelixHttpsNioTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureTypeHint, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureTypeHint  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postConfigAsync(String runmode, String name, Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateTypeHint, String orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureTypeHint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postConfigCall(runmode, name, orgApacheFelixHttpsNio, orgApacheFelixHttpsNioTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureTypeHint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for postNodeRw */
    private com.squareup.okhttp.Call postNodeRwCall(String path, String name, String addMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postNodeRw(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postNodeRw(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/{path}/{name}.rw.html".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (addMembers != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "addMembers", addMembers));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postNodeRw(String path, String name, String addMembers) throws ApiException {
        postNodeRwWithHttpInfo(path, name, addMembers);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postNodeRwWithHttpInfo(String path, String name, String addMembers) throws ApiException {
        com.squareup.okhttp.Call call = postNodeRwCall(path, name, addMembers, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postNodeRwAsync(String path, String name, String addMembers, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postNodeRwCall(path, name, addMembers, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for postPath */
    private com.squareup.okhttp.Call postPathCall(String path, String jcrprimaryType, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postPath(Async)");
        }
        
        // verify the required parameter 'jcrprimaryType' is set
        if (jcrprimaryType == null) {
            throw new ApiException("Missing the required parameter 'jcrprimaryType' when calling postPath(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPath(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/{path}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (jcrprimaryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jcr:primaryType", jcrprimaryType));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", ":name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param jcrprimaryType  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postPath(String path, String jcrprimaryType, String name) throws ApiException {
        postPathWithHttpInfo(path, jcrprimaryType, name);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param jcrprimaryType  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postPathWithHttpInfo(String path, String jcrprimaryType, String name) throws ApiException {
        com.squareup.okhttp.Call call = postPathCall(path, jcrprimaryType, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param jcrprimaryType  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPathAsync(String path, String jcrprimaryType, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPathCall(path, jcrprimaryType, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for postQuery */
    private com.squareup.okhttp.Call postQueryCall(String path, BigDecimal pLimit, String _1Property, String _1PropertyValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postQuery(Async)");
        }
        
        // verify the required parameter 'pLimit' is set
        if (pLimit == null) {
            throw new ApiException("Missing the required parameter 'pLimit' when calling postQuery(Async)");
        }
        
        // verify the required parameter '_1Property' is set
        if (_1Property == null) {
            throw new ApiException("Missing the required parameter '_1Property' when calling postQuery(Async)");
        }
        
        // verify the required parameter '_1PropertyValue' is set
        if (_1PropertyValue == null) {
            throw new ApiException("Missing the required parameter '_1PropertyValue' when calling postQuery(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bin/querybuilder.json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "path", path));
        if (pLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "p.limit", pLimit));
        if (_1Property != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "1_property", _1Property));
        if (_1PropertyValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "1_property.value", _1PropertyValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1Property  (required)
     * @param _1PropertyValue  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String postQuery(String path, BigDecimal pLimit, String _1Property, String _1PropertyValue) throws ApiException {
        ApiResponse<String> resp = postQueryWithHttpInfo(path, pLimit, _1Property, _1PropertyValue);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1Property  (required)
     * @param _1PropertyValue  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> postQueryWithHttpInfo(String path, BigDecimal pLimit, String _1Property, String _1PropertyValue) throws ApiException {
        com.squareup.okhttp.Call call = postQueryCall(path, pLimit, _1Property, _1PropertyValue, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1Property  (required)
     * @param _1PropertyValue  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postQueryAsync(String path, BigDecimal pLimit, String _1Property, String _1PropertyValue, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postQueryCall(path, pLimit, _1Property, _1PropertyValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postTreeActivation */
    private com.squareup.okhttp.Call postTreeActivationCall(Boolean ignoredeactivated, Boolean onlymodified, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'ignoredeactivated' is set
        if (ignoredeactivated == null) {
            throw new ApiException("Missing the required parameter 'ignoredeactivated' when calling postTreeActivation(Async)");
        }
        
        // verify the required parameter 'onlymodified' is set
        if (onlymodified == null) {
            throw new ApiException("Missing the required parameter 'onlymodified' when calling postTreeActivation(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postTreeActivation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/etc/replication/treeactivation.html".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (ignoredeactivated != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ignoredeactivated", ignoredeactivated));
        if (onlymodified != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "onlymodified", onlymodified));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "path", path));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postTreeActivation(Boolean ignoredeactivated, Boolean onlymodified, String path) throws ApiException {
        postTreeActivationWithHttpInfo(ignoredeactivated, onlymodified, path);
    }

    /**
     * 
     * 
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postTreeActivationWithHttpInfo(Boolean ignoredeactivated, Boolean onlymodified, String path) throws ApiException {
        com.squareup.okhttp.Call call = postTreeActivationCall(ignoredeactivated, onlymodified, path, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTreeActivationAsync(Boolean ignoredeactivated, Boolean onlymodified, String path, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTreeActivationCall(ignoredeactivated, onlymodified, path, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
