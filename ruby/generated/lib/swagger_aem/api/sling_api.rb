=begin
#Adobe Experience Manager (AEM) API

#Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

OpenAPI spec version: 1.1.5
Contact: opensource@shinesolutions.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerAemClient
  class SlingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param runmode 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_agent(runmode, name, opts = {})
      delete_agent_with_http_info(runmode, name, opts)
      return nil
    end

    # 
    # 
    # @param runmode 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_agent_with_http_info(runmode, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.delete_agent ..."
      end
      # verify the required parameter 'runmode' is set
      fail ArgumentError, "Missing the required parameter 'runmode' when calling SlingApi.delete_agent" if runmode.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.delete_agent" if name.nil?
      # resource path
      local_var_path = "/etc/replication/agents.{runmode}/{name}".sub('{format}','json').sub('{' + 'runmode' + '}', runmode.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#delete_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param path 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_node(path, name, opts = {})
      delete_node_with_http_info(path, name, opts)
      return nil
    end

    # 
    # 
    # @param path 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_node_with_http_info(path, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.delete_node ..."
      end
      # verify the required parameter 'path' is set
      fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.delete_node" if path.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.delete_node" if name.nil?
      # resource path
      local_var_path = "/{path}/{name}".sub('{format}','json').sub('{' + 'path' + '}', path.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#delete_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param runmode 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_agent(runmode, name, opts = {})
      get_agent_with_http_info(runmode, name, opts)
      return nil
    end

    # 
    # 
    # @param runmode 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_agent_with_http_info(runmode, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.get_agent ..."
      end
      # verify the required parameter 'runmode' is set
      fail ArgumentError, "Missing the required parameter 'runmode' when calling SlingApi.get_agent" if runmode.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.get_agent" if name.nil?
      # resource path
      local_var_path = "/etc/replication/agents.{runmode}/{name}".sub('{format}','json').sub('{' + 'runmode' + '}', runmode.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param path 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_node(path, name, opts = {})
      get_node_with_http_info(path, name, opts)
      return nil
    end

    # 
    # 
    # @param path 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_node_with_http_info(path, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.get_node ..."
      end
      # verify the required parameter 'path' is set
      fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.get_node" if path.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.get_node" if name.nil?
      # resource path
      local_var_path = "/{path}/{name}".sub('{format}','json').sub('{' + 'path' + '}', path.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param group 
    # @param name 
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_package(group, name, version, opts = {})
      data, _status_code, _headers = get_package_with_http_info(group, name, version, opts)
      return data
    end

    # 
    # 
    # @param group 
    # @param name 
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_package_with_http_info(group, name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.get_package ..."
      end
      # verify the required parameter 'group' is set
      fail ArgumentError, "Missing the required parameter 'group' when calling SlingApi.get_package" if group.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.get_package" if name.nil?
      # verify the required parameter 'version' is set
      fail ArgumentError, "Missing the required parameter 'version' when calling SlingApi.get_package" if version.nil?
      # resource path
      local_var_path = "/etc/packages/{group}/{name}-{version}.zip".sub('{format}','json').sub('{' + 'group' + '}', group.to_s).sub('{' + 'name' + '}', name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_package\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param group 
    # @param name 
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_package_filter(group, name, version, opts = {})
      data, _status_code, _headers = get_package_filter_with_http_info(group, name, version, opts)
      return data
    end

    # 
    # 
    # @param group 
    # @param name 
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_package_filter_with_http_info(group, name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.get_package_filter ..."
      end
      # verify the required parameter 'group' is set
      fail ArgumentError, "Missing the required parameter 'group' when calling SlingApi.get_package_filter" if group.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.get_package_filter" if name.nil?
      # verify the required parameter 'version' is set
      fail ArgumentError, "Missing the required parameter 'version' when calling SlingApi.get_package_filter" if version.nil?
      # resource path
      local_var_path = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json".sub('{format}','json').sub('{' + 'group' + '}', group.to_s).sub('{' + 'name' + '}', name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#get_package_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param runmode 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jcrprimary_type 
    # @option opts [String] :jcrcontentcqname 
    # @option opts [String] :jcrcontentjcrtitle 
    # @option opts [String] :jcrcontentjcrdescription 
    # @option opts [String] :jcrcontentslingresource_type 
    # @option opts [String] :jcrcontenttransport_uri 
    # @option opts [String] :jcrcontenttransport_user 
    # @option opts [String] :jcrcontenttransport_password 
    # @option opts [String] :jcrcontentlog_level 
    # @option opts [BOOLEAN] :jcrcontentno_versioning 
    # @option opts [Array<String>] :jcrcontentprotocol_http_headers 
    # @option opts [String] :jcrcontentprotocol_http_headers_type_hint 
    # @option opts [String] :jcrcontentprotocol_http_method 
    # @option opts [String] :jcrcontentretry_delay 
    # @option opts [String] :jcrcontentserialization_type 
    # @option opts [String] :jcrcontentjcrmixin_types 
    # @option opts [BOOLEAN] :jcrcontenttrigger_receive 
    # @option opts [BOOLEAN] :jcrcontenttrigger_specific 
    # @option opts [String] :jcrcontentcqtemplate 
    # @option opts [BOOLEAN] :jcrcontentenabled 
    # @option opts [BOOLEAN] :jcrcontentreverse_replication 
    # @option opts [String] :operation 
    # @return [nil]
    def post_agent(runmode, name, opts = {})
      post_agent_with_http_info(runmode, name, opts)
      return nil
    end

    # 
    # 
    # @param runmode 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :jcrprimary_type 
    # @option opts [String] :jcrcontentcqname 
    # @option opts [String] :jcrcontentjcrtitle 
    # @option opts [String] :jcrcontentjcrdescription 
    # @option opts [String] :jcrcontentslingresource_type 
    # @option opts [String] :jcrcontenttransport_uri 
    # @option opts [String] :jcrcontenttransport_user 
    # @option opts [String] :jcrcontenttransport_password 
    # @option opts [String] :jcrcontentlog_level 
    # @option opts [BOOLEAN] :jcrcontentno_versioning 
    # @option opts [Array<String>] :jcrcontentprotocol_http_headers 
    # @option opts [String] :jcrcontentprotocol_http_headers_type_hint 
    # @option opts [String] :jcrcontentprotocol_http_method 
    # @option opts [String] :jcrcontentretry_delay 
    # @option opts [String] :jcrcontentserialization_type 
    # @option opts [String] :jcrcontentjcrmixin_types 
    # @option opts [BOOLEAN] :jcrcontenttrigger_receive 
    # @option opts [BOOLEAN] :jcrcontenttrigger_specific 
    # @option opts [String] :jcrcontentcqtemplate 
    # @option opts [BOOLEAN] :jcrcontentenabled 
    # @option opts [BOOLEAN] :jcrcontentreverse_replication 
    # @option opts [String] :operation 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_agent_with_http_info(runmode, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.post_agent ..."
      end
      # verify the required parameter 'runmode' is set
      fail ArgumentError, "Missing the required parameter 'runmode' when calling SlingApi.post_agent" if runmode.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.post_agent" if name.nil?
      # resource path
      local_var_path = "/etc/replication/agents.{runmode}/{name}".sub('{format}','json').sub('{' + 'runmode' + '}', runmode.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'jcr:primaryType'] = opts[:'jcrprimary_type'] if !opts[:'jcrprimary_type'].nil?
      query_params[:'jcr:content/cq:name'] = opts[:'jcrcontentcqname'] if !opts[:'jcrcontentcqname'].nil?
      query_params[:'jcr:content/jcr:title'] = opts[:'jcrcontentjcrtitle'] if !opts[:'jcrcontentjcrtitle'].nil?
      query_params[:'jcr:content/jcr:description'] = opts[:'jcrcontentjcrdescription'] if !opts[:'jcrcontentjcrdescription'].nil?
      query_params[:'jcr:content/sling:resourceType'] = opts[:'jcrcontentslingresource_type'] if !opts[:'jcrcontentslingresource_type'].nil?
      query_params[:'jcr:content/transportUri'] = opts[:'jcrcontenttransport_uri'] if !opts[:'jcrcontenttransport_uri'].nil?
      query_params[:'jcr:content/transportUser'] = opts[:'jcrcontenttransport_user'] if !opts[:'jcrcontenttransport_user'].nil?
      query_params[:'jcr:content/transportPassword'] = opts[:'jcrcontenttransport_password'] if !opts[:'jcrcontenttransport_password'].nil?
      query_params[:'jcr:content/logLevel'] = opts[:'jcrcontentlog_level'] if !opts[:'jcrcontentlog_level'].nil?
      query_params[:'jcr:content/noVersioning'] = opts[:'jcrcontentno_versioning'] if !opts[:'jcrcontentno_versioning'].nil?
      query_params[:'jcr:content/protocolHTTPHeaders'] = @api_client.build_collection_param(opts[:'jcrcontentprotocol_http_headers'], :multi) if !opts[:'jcrcontentprotocol_http_headers'].nil?
      query_params[:'jcr:content/protocolHTTPHeaders@TypeHint'] = opts[:'jcrcontentprotocol_http_headers_type_hint'] if !opts[:'jcrcontentprotocol_http_headers_type_hint'].nil?
      query_params[:'jcr:content/protocolHTTPMethod'] = opts[:'jcrcontentprotocol_http_method'] if !opts[:'jcrcontentprotocol_http_method'].nil?
      query_params[:'jcr:content/retryDelay'] = opts[:'jcrcontentretry_delay'] if !opts[:'jcrcontentretry_delay'].nil?
      query_params[:'jcr:content/serializationType'] = opts[:'jcrcontentserialization_type'] if !opts[:'jcrcontentserialization_type'].nil?
      query_params[:'jcr:content/jcr:mixinTypes'] = opts[:'jcrcontentjcrmixin_types'] if !opts[:'jcrcontentjcrmixin_types'].nil?
      query_params[:'jcr:content/triggerReceive'] = opts[:'jcrcontenttrigger_receive'] if !opts[:'jcrcontenttrigger_receive'].nil?
      query_params[:'jcr:content/triggerSpecific'] = opts[:'jcrcontenttrigger_specific'] if !opts[:'jcrcontenttrigger_specific'].nil?
      query_params[:'jcr:content/cq:template'] = opts[:'jcrcontentcqtemplate'] if !opts[:'jcrcontentcqtemplate'].nil?
      query_params[:'jcr:content/enabled'] = opts[:'jcrcontentenabled'] if !opts[:'jcrcontentenabled'].nil?
      query_params[:'jcr:content/reverseReplication'] = opts[:'jcrcontentreverse_replication'] if !opts[:'jcrcontentreverse_replication'].nil?
      query_params[:':operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param authorizable_id 
    # @param intermediate_path 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :create_user 
    # @option opts [String] :create_group 
    # @option opts [String] :reppassword 
    # @option opts [String] :profilegiven_name 
    # @return [String]
    def post_authorizables(authorizable_id, intermediate_path, opts = {})
      data, _status_code, _headers = post_authorizables_with_http_info(authorizable_id, intermediate_path, opts)
      return data
    end

    # 
    # 
    # @param authorizable_id 
    # @param intermediate_path 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :create_user 
    # @option opts [String] :create_group 
    # @option opts [String] :reppassword 
    # @option opts [String] :profilegiven_name 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_authorizables_with_http_info(authorizable_id, intermediate_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.post_authorizables ..."
      end
      # verify the required parameter 'authorizable_id' is set
      fail ArgumentError, "Missing the required parameter 'authorizable_id' when calling SlingApi.post_authorizables" if authorizable_id.nil?
      # verify the required parameter 'intermediate_path' is set
      fail ArgumentError, "Missing the required parameter 'intermediate_path' when calling SlingApi.post_authorizables" if intermediate_path.nil?
      # resource path
      local_var_path = "/libs/granite/security/post/authorizables".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'authorizableId'] = authorizable_id
      query_params[:'intermediatePath'] = intermediate_path
      query_params[:'createUser'] = opts[:'create_user'] if !opts[:'create_user'].nil?
      query_params[:'createGroup'] = opts[:'create_group'] if !opts[:'create_group'].nil?
      query_params[:'rep:password'] = opts[:'reppassword'] if !opts[:'reppassword'].nil?
      query_params[:'profile/givenName'] = opts[:'profilegiven_name'] if !opts[:'profilegiven_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_authorizables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param runmode 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :org_apache_felix_https_nio 
    # @option opts [String] :org_apache_felix_https_nio_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore 
    # @option opts [String] :org_apache_felix_https_keystore_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_password 
    # @option opts [String] :org_apache_felix_https_keystore_password_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_key 
    # @option opts [String] :org_apache_felix_https_keystore_key_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_key_password 
    # @option opts [String] :org_apache_felix_https_keystore_key_password_type_hint 
    # @option opts [String] :org_apache_felix_https_truststore 
    # @option opts [String] :org_apache_felix_https_truststore_type_hint 
    # @option opts [String] :org_apache_felix_https_truststore_password 
    # @option opts [String] :org_apache_felix_https_truststore_password_type_hint 
    # @option opts [String] :org_apache_felix_https_clientcertificate 
    # @option opts [String] :org_apache_felix_https_clientcertificate_type_hint 
    # @option opts [String] :org_apache_felix_https_enable 
    # @option opts [String] :org_apache_felix_https_enable_type_hint 
    # @option opts [String] :org_osgi_service_http_port_secure 
    # @option opts [String] :org_osgi_service_http_port_secure_type_hint 
    # @option opts [String] :json_maximumresults 
    # @option opts [String] :json_maximumresults_type_hint 
    # @option opts [BOOLEAN] :enable_html 
    # @option opts [String] :enable_html_type_hint 
    # @option opts [BOOLEAN] :enable_txt 
    # @option opts [String] :enable_txt_type_hint 
    # @option opts [BOOLEAN] :enable_xml 
    # @option opts [String] :enable_xml_type_hint 
    # @return [nil]
    def post_config(runmode, name, opts = {})
      post_config_with_http_info(runmode, name, opts)
      return nil
    end

    # 
    # 
    # @param runmode 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :org_apache_felix_https_nio 
    # @option opts [String] :org_apache_felix_https_nio_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore 
    # @option opts [String] :org_apache_felix_https_keystore_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_password 
    # @option opts [String] :org_apache_felix_https_keystore_password_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_key 
    # @option opts [String] :org_apache_felix_https_keystore_key_type_hint 
    # @option opts [String] :org_apache_felix_https_keystore_key_password 
    # @option opts [String] :org_apache_felix_https_keystore_key_password_type_hint 
    # @option opts [String] :org_apache_felix_https_truststore 
    # @option opts [String] :org_apache_felix_https_truststore_type_hint 
    # @option opts [String] :org_apache_felix_https_truststore_password 
    # @option opts [String] :org_apache_felix_https_truststore_password_type_hint 
    # @option opts [String] :org_apache_felix_https_clientcertificate 
    # @option opts [String] :org_apache_felix_https_clientcertificate_type_hint 
    # @option opts [String] :org_apache_felix_https_enable 
    # @option opts [String] :org_apache_felix_https_enable_type_hint 
    # @option opts [String] :org_osgi_service_http_port_secure 
    # @option opts [String] :org_osgi_service_http_port_secure_type_hint 
    # @option opts [String] :json_maximumresults 
    # @option opts [String] :json_maximumresults_type_hint 
    # @option opts [BOOLEAN] :enable_html 
    # @option opts [String] :enable_html_type_hint 
    # @option opts [BOOLEAN] :enable_txt 
    # @option opts [String] :enable_txt_type_hint 
    # @option opts [BOOLEAN] :enable_xml 
    # @option opts [String] :enable_xml_type_hint 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_config_with_http_info(runmode, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.post_config ..."
      end
      # verify the required parameter 'runmode' is set
      fail ArgumentError, "Missing the required parameter 'runmode' when calling SlingApi.post_config" if runmode.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.post_config" if name.nil?
      # resource path
      local_var_path = "/apps/system/config.{runmode}/{name}".sub('{format}','json').sub('{' + 'runmode' + '}', runmode.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'org.apache.felix.https.nio'] = opts[:'org_apache_felix_https_nio'] if !opts[:'org_apache_felix_https_nio'].nil?
      query_params[:'org.apache.felix.https.nio@TypeHint'] = opts[:'org_apache_felix_https_nio_type_hint'] if !opts[:'org_apache_felix_https_nio_type_hint'].nil?
      query_params[:'org.apache.felix.https.keystore'] = opts[:'org_apache_felix_https_keystore'] if !opts[:'org_apache_felix_https_keystore'].nil?
      query_params[:'org.apache.felix.https.keystore@TypeHint'] = opts[:'org_apache_felix_https_keystore_type_hint'] if !opts[:'org_apache_felix_https_keystore_type_hint'].nil?
      query_params[:'org.apache.felix.https.keystore.password'] = opts[:'org_apache_felix_https_keystore_password'] if !opts[:'org_apache_felix_https_keystore_password'].nil?
      query_params[:'org.apache.felix.https.keystore.password@TypeHint'] = opts[:'org_apache_felix_https_keystore_password_type_hint'] if !opts[:'org_apache_felix_https_keystore_password_type_hint'].nil?
      query_params[:'org.apache.felix.https.keystore.key'] = opts[:'org_apache_felix_https_keystore_key'] if !opts[:'org_apache_felix_https_keystore_key'].nil?
      query_params[:'org.apache.felix.https.keystore.key@TypeHint'] = opts[:'org_apache_felix_https_keystore_key_type_hint'] if !opts[:'org_apache_felix_https_keystore_key_type_hint'].nil?
      query_params[:'org.apache.felix.https.keystore.key.password'] = opts[:'org_apache_felix_https_keystore_key_password'] if !opts[:'org_apache_felix_https_keystore_key_password'].nil?
      query_params[:'org.apache.felix.https.keystore.key.password@TypeHint'] = opts[:'org_apache_felix_https_keystore_key_password_type_hint'] if !opts[:'org_apache_felix_https_keystore_key_password_type_hint'].nil?
      query_params[:'org.apache.felix.https.truststore'] = opts[:'org_apache_felix_https_truststore'] if !opts[:'org_apache_felix_https_truststore'].nil?
      query_params[:'org.apache.felix.https.truststore@TypeHint'] = opts[:'org_apache_felix_https_truststore_type_hint'] if !opts[:'org_apache_felix_https_truststore_type_hint'].nil?
      query_params[:'org.apache.felix.https.truststore.password'] = opts[:'org_apache_felix_https_truststore_password'] if !opts[:'org_apache_felix_https_truststore_password'].nil?
      query_params[:'org.apache.felix.https.truststore.password@TypeHint'] = opts[:'org_apache_felix_https_truststore_password_type_hint'] if !opts[:'org_apache_felix_https_truststore_password_type_hint'].nil?
      query_params[:'org.apache.felix.https.clientcertificate'] = opts[:'org_apache_felix_https_clientcertificate'] if !opts[:'org_apache_felix_https_clientcertificate'].nil?
      query_params[:'org.apache.felix.https.clientcertificate@TypeHint'] = opts[:'org_apache_felix_https_clientcertificate_type_hint'] if !opts[:'org_apache_felix_https_clientcertificate_type_hint'].nil?
      query_params[:'org.apache.felix.https.enable'] = opts[:'org_apache_felix_https_enable'] if !opts[:'org_apache_felix_https_enable'].nil?
      query_params[:'org.apache.felix.https.enable@TypeHint'] = opts[:'org_apache_felix_https_enable_type_hint'] if !opts[:'org_apache_felix_https_enable_type_hint'].nil?
      query_params[:'org.osgi.service.http.port.secure'] = opts[:'org_osgi_service_http_port_secure'] if !opts[:'org_osgi_service_http_port_secure'].nil?
      query_params[:'org.osgi.service.http.port.secure@TypeHint'] = opts[:'org_osgi_service_http_port_secure_type_hint'] if !opts[:'org_osgi_service_http_port_secure_type_hint'].nil?
      query_params[:'json.maximumresults'] = opts[:'json_maximumresults'] if !opts[:'json_maximumresults'].nil?
      query_params[:'json.maximumresults@TypeHint'] = opts[:'json_maximumresults_type_hint'] if !opts[:'json_maximumresults_type_hint'].nil?
      query_params[:'enable.html'] = opts[:'enable_html'] if !opts[:'enable_html'].nil?
      query_params[:'enable.html@TypeHint'] = opts[:'enable_html_type_hint'] if !opts[:'enable_html_type_hint'].nil?
      query_params[:'enable.txt'] = opts[:'enable_txt'] if !opts[:'enable_txt'].nil?
      query_params[:'enable.txt@TypeHint'] = opts[:'enable_txt_type_hint'] if !opts[:'enable_txt_type_hint'].nil?
      query_params[:'enable.xml'] = opts[:'enable_xml'] if !opts[:'enable_xml'].nil?
      query_params[:'enable.xml@TypeHint'] = opts[:'enable_xml_type_hint'] if !opts[:'enable_xml_type_hint'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param path 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :add_members 
    # @return [nil]
    def post_node_rw(path, name, opts = {})
      post_node_rw_with_http_info(path, name, opts)
      return nil
    end

    # 
    # 
    # @param path 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :add_members 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_node_rw_with_http_info(path, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.post_node_rw ..."
      end
      # verify the required parameter 'path' is set
      fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.post_node_rw" if path.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.post_node_rw" if name.nil?
      # resource path
      local_var_path = "/{path}/{name}.rw.html".sub('{format}','json').sub('{' + 'path' + '}', path.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'addMembers'] = opts[:'add_members'] if !opts[:'add_members'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_node_rw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param path 
    # @param jcrprimary_type 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_path(path, jcrprimary_type, name, opts = {})
      post_path_with_http_info(path, jcrprimary_type, name, opts)
      return nil
    end

    # 
    # 
    # @param path 
    # @param jcrprimary_type 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_path_with_http_info(path, jcrprimary_type, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.post_path ..."
      end
      # verify the required parameter 'path' is set
      fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.post_path" if path.nil?
      # verify the required parameter 'jcrprimary_type' is set
      fail ArgumentError, "Missing the required parameter 'jcrprimary_type' when calling SlingApi.post_path" if jcrprimary_type.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling SlingApi.post_path" if name.nil?
      # resource path
      local_var_path = "/{path}/".sub('{format}','json').sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'jcr:primaryType'] = jcrprimary_type
      query_params[:':name'] = name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param path 
    # @param p_limit 
    # @param _1_property 
    # @param _1_property_value 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def post_query(path, p_limit, _1_property, _1_property_value, opts = {})
      data, _status_code, _headers = post_query_with_http_info(path, p_limit, _1_property, _1_property_value, opts)
      return data
    end

    # 
    # 
    # @param path 
    # @param p_limit 
    # @param _1_property 
    # @param _1_property_value 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_query_with_http_info(path, p_limit, _1_property, _1_property_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.post_query ..."
      end
      # verify the required parameter 'path' is set
      fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.post_query" if path.nil?
      # verify the required parameter 'p_limit' is set
      fail ArgumentError, "Missing the required parameter 'p_limit' when calling SlingApi.post_query" if p_limit.nil?
      # verify the required parameter '_1_property' is set
      fail ArgumentError, "Missing the required parameter '_1_property' when calling SlingApi.post_query" if _1_property.nil?
      # verify the required parameter '_1_property_value' is set
      fail ArgumentError, "Missing the required parameter '_1_property_value' when calling SlingApi.post_query" if _1_property_value.nil?
      # resource path
      local_var_path = "/bin/querybuilder.json".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'path'] = path
      query_params[:'p.limit'] = p_limit
      query_params[:'1_property'] = _1_property
      query_params[:'1_property.value'] = _1_property_value

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param ignoredeactivated 
    # @param onlymodified 
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_tree_activation(ignoredeactivated, onlymodified, path, opts = {})
      post_tree_activation_with_http_info(ignoredeactivated, onlymodified, path, opts)
      return nil
    end

    # 
    # 
    # @param ignoredeactivated 
    # @param onlymodified 
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_tree_activation_with_http_info(ignoredeactivated, onlymodified, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SlingApi.post_tree_activation ..."
      end
      # verify the required parameter 'ignoredeactivated' is set
      fail ArgumentError, "Missing the required parameter 'ignoredeactivated' when calling SlingApi.post_tree_activation" if ignoredeactivated.nil?
      # verify the required parameter 'onlymodified' is set
      fail ArgumentError, "Missing the required parameter 'onlymodified' when calling SlingApi.post_tree_activation" if onlymodified.nil?
      # verify the required parameter 'path' is set
      fail ArgumentError, "Missing the required parameter 'path' when calling SlingApi.post_tree_activation" if path.nil?
      # resource path
      local_var_path = "/etc/replication/treeactivation.html".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'ignoredeactivated'] = ignoredeactivated
      query_params[:'onlymodified'] = onlymodified
      query_params[:'path'] = path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['aemAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SlingApi#post_tree_activation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
