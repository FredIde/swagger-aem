# coding: utf-8

"""
    Adobe Experience Manager (AEM) API

    An Adobe Experience Manager (AEM) API specification

    OpenAPI spec version: 6.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SlingApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_agent(self, runmode, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_agent(runmode, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str runmode:  (required)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_agent_with_http_info(runmode, name, **kwargs)
        else:
            (data) = self.delete_agent_with_http_info(runmode, name, **kwargs)
            return data

    def delete_agent_with_http_info(self, runmode, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_agent_with_http_info(runmode, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str runmode:  (required)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runmode', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'runmode' is set
        if ('runmode' not in params) or (params['runmode'] is None):
            raise ValueError("Missing the required parameter `runmode` when calling `delete_agent`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_agent`")

        resource_path = '/etc/replication/agents.{runmode}/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'runmode' in params:
            path_params['runmode'] = params['runmode']
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_node(self, path, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_node(path, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path:  (required)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_node_with_http_info(path, name, **kwargs)
        else:
            (data) = self.delete_node_with_http_info(path, name, **kwargs)
            return data

    def delete_node_with_http_info(self, path, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_node_with_http_info(path, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path:  (required)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params) or (params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `delete_node`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_node`")

        resource_path = '/{path}/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_agent(self, runmode, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_agent(runmode, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str runmode:  (required)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_agent_with_http_info(runmode, name, **kwargs)
        else:
            (data) = self.get_agent_with_http_info(runmode, name, **kwargs)
            return data

    def get_agent_with_http_info(self, runmode, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_agent_with_http_info(runmode, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str runmode:  (required)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runmode', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'runmode' is set
        if ('runmode' not in params) or (params['runmode'] is None):
            raise ValueError("Missing the required parameter `runmode` when calling `get_agent`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_agent`")

        resource_path = '/etc/replication/agents.{runmode}/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'runmode' in params:
            path_params['runmode'] = params['runmode']
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_node(self, path, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_node(path, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path:  (required)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_node_with_http_info(path, name, **kwargs)
        else:
            (data) = self.get_node_with_http_info(path, name, **kwargs)
            return data

    def get_node_with_http_info(self, path, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_node_with_http_info(path, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path:  (required)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params) or (params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_node`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_node`")

        resource_path = '/{path}/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_package(self, group, name, version, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_package(group, name, version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group:  (required)
        :param str name:  (required)
        :param str version:  (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_package_with_http_info(group, name, version, **kwargs)
        else:
            (data) = self.get_package_with_http_info(group, name, version, **kwargs)
            return data

    def get_package_with_http_info(self, group, name, version, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_package_with_http_info(group, name, version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group:  (required)
        :param str name:  (required)
        :param str version:  (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group', 'name', 'version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `get_package`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_package`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_package`")

        resource_path = '/etc/packages/{group}/{name}-{version}.zip'.replace('{format}', 'json')
        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']
        if 'name' in params:
            path_params['name'] = params['name']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='file',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_package_filter(self, group, name, version, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_package_filter(group, name, version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group:  (required)
        :param str name:  (required)
        :param str version:  (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_package_filter_with_http_info(group, name, version, **kwargs)
        else:
            (data) = self.get_package_filter_with_http_info(group, name, version, **kwargs)
            return data

    def get_package_filter_with_http_info(self, group, name, version, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_package_filter_with_http_info(group, name, version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group:  (required)
        :param str name:  (required)
        :param str version:  (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group', 'name', 'version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `get_package_filter`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_package_filter`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_package_filter`")

        resource_path = '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json'.replace('{format}', 'json')
        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']
        if 'name' in params:
            path_params['name'] = params['name']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_agent(self, runmode, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_agent(runmode, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str runmode:  (required)
        :param str name:  (required)
        :param str jcrprimary_type: 
        :param str jcrcontentcqname: 
        :param str jcrcontentjcrtitle: 
        :param str jcrcontentjcrdescription: 
        :param str jcrcontentslingresource_type: 
        :param str jcrcontenttransport_uri: 
        :param str jcrcontentlog_level: 
        :param bool jcrcontentno_versioning: 
        :param list[str] jcrcontentprotocol_http_headers: 
        :param str jcrcontentprotocol_http_headers_type_hint: 
        :param str jcrcontentprotocol_http_method: 
        :param str jcrcontentretry_delay: 
        :param str jcrcontentserialization_type: 
        :param str jcrcontentjcrmixin_types: 
        :param bool jcrcontenttrigger_receive: 
        :param bool jcrcontenttrigger_specific: 
        :param str jcrcontentcqtemplate: 
        :param bool jcrcontentenabled: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_agent_with_http_info(runmode, name, **kwargs)
        else:
            (data) = self.post_agent_with_http_info(runmode, name, **kwargs)
            return data

    def post_agent_with_http_info(self, runmode, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_agent_with_http_info(runmode, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str runmode:  (required)
        :param str name:  (required)
        :param str jcrprimary_type: 
        :param str jcrcontentcqname: 
        :param str jcrcontentjcrtitle: 
        :param str jcrcontentjcrdescription: 
        :param str jcrcontentslingresource_type: 
        :param str jcrcontenttransport_uri: 
        :param str jcrcontentlog_level: 
        :param bool jcrcontentno_versioning: 
        :param list[str] jcrcontentprotocol_http_headers: 
        :param str jcrcontentprotocol_http_headers_type_hint: 
        :param str jcrcontentprotocol_http_method: 
        :param str jcrcontentretry_delay: 
        :param str jcrcontentserialization_type: 
        :param str jcrcontentjcrmixin_types: 
        :param bool jcrcontenttrigger_receive: 
        :param bool jcrcontenttrigger_specific: 
        :param str jcrcontentcqtemplate: 
        :param bool jcrcontentenabled: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runmode', 'name', 'jcrprimary_type', 'jcrcontentcqname', 'jcrcontentjcrtitle', 'jcrcontentjcrdescription', 'jcrcontentslingresource_type', 'jcrcontenttransport_uri', 'jcrcontentlog_level', 'jcrcontentno_versioning', 'jcrcontentprotocol_http_headers', 'jcrcontentprotocol_http_headers_type_hint', 'jcrcontentprotocol_http_method', 'jcrcontentretry_delay', 'jcrcontentserialization_type', 'jcrcontentjcrmixin_types', 'jcrcontenttrigger_receive', 'jcrcontenttrigger_specific', 'jcrcontentcqtemplate', 'jcrcontentenabled']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'runmode' is set
        if ('runmode' not in params) or (params['runmode'] is None):
            raise ValueError("Missing the required parameter `runmode` when calling `post_agent`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_agent`")

        resource_path = '/etc/replication/agents.{runmode}/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'runmode' in params:
            path_params['runmode'] = params['runmode']
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}
        if 'jcrprimary_type' in params:
            query_params['jcr:primaryType'] = params['jcrprimary_type']
        if 'jcrcontentcqname' in params:
            query_params['jcr:content/cq:name'] = params['jcrcontentcqname']
        if 'jcrcontentjcrtitle' in params:
            query_params['jcr:content/jcr:title'] = params['jcrcontentjcrtitle']
        if 'jcrcontentjcrdescription' in params:
            query_params['jcr:content/jcr:description'] = params['jcrcontentjcrdescription']
        if 'jcrcontentslingresource_type' in params:
            query_params['jcr:content/sling:resourceType'] = params['jcrcontentslingresource_type']
        if 'jcrcontenttransport_uri' in params:
            query_params['jcr:content/transportUri'] = params['jcrcontenttransport_uri']
        if 'jcrcontentlog_level' in params:
            query_params['jcr:content/logLevel'] = params['jcrcontentlog_level']
        if 'jcrcontentno_versioning' in params:
            query_params['jcr:content/noVersioning'] = params['jcrcontentno_versioning']
        if 'jcrcontentprotocol_http_headers' in params:
            query_params['jcr:content/protocolHTTPHeaders'] = params['jcrcontentprotocol_http_headers']
        if 'jcrcontentprotocol_http_headers_type_hint' in params:
            query_params['jcr:content/protocolHTTPHeaders@TypeHint'] = params['jcrcontentprotocol_http_headers_type_hint']
        if 'jcrcontentprotocol_http_method' in params:
            query_params['jcr:content/protocolHTTPMethod'] = params['jcrcontentprotocol_http_method']
        if 'jcrcontentretry_delay' in params:
            query_params['jcr:content/retryDelay'] = params['jcrcontentretry_delay']
        if 'jcrcontentserialization_type' in params:
            query_params['jcr:content/serializationType'] = params['jcrcontentserialization_type']
        if 'jcrcontentjcrmixin_types' in params:
            query_params['jcr:content/jcr:mixinTypes'] = params['jcrcontentjcrmixin_types']
        if 'jcrcontenttrigger_receive' in params:
            query_params['jcr:content/triggerReceive'] = params['jcrcontenttrigger_receive']
        if 'jcrcontenttrigger_specific' in params:
            query_params['jcr:content/triggerSpecific'] = params['jcrcontenttrigger_specific']
        if 'jcrcontentcqtemplate' in params:
            query_params['jcr:content/cq:template'] = params['jcrcontentcqtemplate']
        if 'jcrcontentenabled' in params:
            query_params['jcr:content/enabled'] = params['jcrcontentenabled']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_authorizables(self, authorizable_id, intermediate_path, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_authorizables(authorizable_id, intermediate_path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorizable_id:  (required)
        :param str intermediate_path:  (required)
        :param str create_user: 
        :param str create_group: 
        :param str reppassword: 
        :param str profilegiven_name: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_authorizables_with_http_info(authorizable_id, intermediate_path, **kwargs)
        else:
            (data) = self.post_authorizables_with_http_info(authorizable_id, intermediate_path, **kwargs)
            return data

    def post_authorizables_with_http_info(self, authorizable_id, intermediate_path, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_authorizables_with_http_info(authorizable_id, intermediate_path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorizable_id:  (required)
        :param str intermediate_path:  (required)
        :param str create_user: 
        :param str create_group: 
        :param str reppassword: 
        :param str profilegiven_name: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorizable_id', 'intermediate_path', 'create_user', 'create_group', 'reppassword', 'profilegiven_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_authorizables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorizable_id' is set
        if ('authorizable_id' not in params) or (params['authorizable_id'] is None):
            raise ValueError("Missing the required parameter `authorizable_id` when calling `post_authorizables`")
        # verify the required parameter 'intermediate_path' is set
        if ('intermediate_path' not in params) or (params['intermediate_path'] is None):
            raise ValueError("Missing the required parameter `intermediate_path` when calling `post_authorizables`")

        resource_path = '/libs/granite/security/post/authorizables'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'authorizable_id' in params:
            query_params['authorizableId'] = params['authorizable_id']
        if 'intermediate_path' in params:
            query_params['intermediatePath'] = params['intermediate_path']
        if 'create_user' in params:
            query_params['createUser'] = params['create_user']
        if 'create_group' in params:
            query_params['createGroup'] = params['create_group']
        if 'reppassword' in params:
            query_params['rep:password'] = params['reppassword']
        if 'profilegiven_name' in params:
            query_params['profile/givenName'] = params['profilegiven_name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/html'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_config(self, runmode, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_config(runmode, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str runmode:  (required)
        :param str name:  (required)
        :param bool org_apache_felix_https_nio: 
        :param str org_apache_felix_https_nio_type_hint: 
        :param str org_apache_felix_https_keystore: 
        :param str org_apache_felix_https_keystore_type_hint: 
        :param str org_apache_felix_https_keystore_password: 
        :param str org_apache_felix_https_keystore_password_type_hint: 
        :param str org_apache_felix_https_keystore_key: 
        :param str org_apache_felix_https_keystore_key_type_hint: 
        :param str org_apache_felix_https_keystore_key_password: 
        :param str org_apache_felix_https_keystore_key_password_type_hint: 
        :param str org_apache_felix_https_truststore: 
        :param str org_apache_felix_https_truststore_type_hint: 
        :param str org_apache_felix_https_truststore_password: 
        :param str org_apache_felix_https_truststore_password_type_hint: 
        :param str org_apache_felix_https_clientcertificate: 
        :param str org_apache_felix_https_clientcertificate_type_hint: 
        :param str org_apache_felix_https_enable: 
        :param str org_apache_felix_https_enable_type_hint: 
        :param str org_osgi_service_http_port_secure: 
        :param str org_osgi_service_http_port_secure_type_hint: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_config_with_http_info(runmode, name, **kwargs)
        else:
            (data) = self.post_config_with_http_info(runmode, name, **kwargs)
            return data

    def post_config_with_http_info(self, runmode, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_config_with_http_info(runmode, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str runmode:  (required)
        :param str name:  (required)
        :param bool org_apache_felix_https_nio: 
        :param str org_apache_felix_https_nio_type_hint: 
        :param str org_apache_felix_https_keystore: 
        :param str org_apache_felix_https_keystore_type_hint: 
        :param str org_apache_felix_https_keystore_password: 
        :param str org_apache_felix_https_keystore_password_type_hint: 
        :param str org_apache_felix_https_keystore_key: 
        :param str org_apache_felix_https_keystore_key_type_hint: 
        :param str org_apache_felix_https_keystore_key_password: 
        :param str org_apache_felix_https_keystore_key_password_type_hint: 
        :param str org_apache_felix_https_truststore: 
        :param str org_apache_felix_https_truststore_type_hint: 
        :param str org_apache_felix_https_truststore_password: 
        :param str org_apache_felix_https_truststore_password_type_hint: 
        :param str org_apache_felix_https_clientcertificate: 
        :param str org_apache_felix_https_clientcertificate_type_hint: 
        :param str org_apache_felix_https_enable: 
        :param str org_apache_felix_https_enable_type_hint: 
        :param str org_osgi_service_http_port_secure: 
        :param str org_osgi_service_http_port_secure_type_hint: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runmode', 'name', 'org_apache_felix_https_nio', 'org_apache_felix_https_nio_type_hint', 'org_apache_felix_https_keystore', 'org_apache_felix_https_keystore_type_hint', 'org_apache_felix_https_keystore_password', 'org_apache_felix_https_keystore_password_type_hint', 'org_apache_felix_https_keystore_key', 'org_apache_felix_https_keystore_key_type_hint', 'org_apache_felix_https_keystore_key_password', 'org_apache_felix_https_keystore_key_password_type_hint', 'org_apache_felix_https_truststore', 'org_apache_felix_https_truststore_type_hint', 'org_apache_felix_https_truststore_password', 'org_apache_felix_https_truststore_password_type_hint', 'org_apache_felix_https_clientcertificate', 'org_apache_felix_https_clientcertificate_type_hint', 'org_apache_felix_https_enable', 'org_apache_felix_https_enable_type_hint', 'org_osgi_service_http_port_secure', 'org_osgi_service_http_port_secure_type_hint']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'runmode' is set
        if ('runmode' not in params) or (params['runmode'] is None):
            raise ValueError("Missing the required parameter `runmode` when calling `post_config`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_config`")

        resource_path = '/apps/system/config.{runmode}/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'runmode' in params:
            path_params['runmode'] = params['runmode']
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}
        if 'org_apache_felix_https_nio' in params:
            query_params['org.apache.felix.https.nio'] = params['org_apache_felix_https_nio']
        if 'org_apache_felix_https_nio_type_hint' in params:
            query_params['org.apache.felix.https.nio@TypeHint'] = params['org_apache_felix_https_nio_type_hint']
        if 'org_apache_felix_https_keystore' in params:
            query_params['org.apache.felix.https.keystore'] = params['org_apache_felix_https_keystore']
        if 'org_apache_felix_https_keystore_type_hint' in params:
            query_params['org.apache.felix.https.keystore@TypeHint'] = params['org_apache_felix_https_keystore_type_hint']
        if 'org_apache_felix_https_keystore_password' in params:
            query_params['org.apache.felix.https.keystore.password'] = params['org_apache_felix_https_keystore_password']
        if 'org_apache_felix_https_keystore_password_type_hint' in params:
            query_params['org.apache.felix.https.keystore.password@TypeHint'] = params['org_apache_felix_https_keystore_password_type_hint']
        if 'org_apache_felix_https_keystore_key' in params:
            query_params['org.apache.felix.https.keystore.key'] = params['org_apache_felix_https_keystore_key']
        if 'org_apache_felix_https_keystore_key_type_hint' in params:
            query_params['org.apache.felix.https.keystore.key@TypeHint'] = params['org_apache_felix_https_keystore_key_type_hint']
        if 'org_apache_felix_https_keystore_key_password' in params:
            query_params['org.apache.felix.https.keystore.key.password'] = params['org_apache_felix_https_keystore_key_password']
        if 'org_apache_felix_https_keystore_key_password_type_hint' in params:
            query_params['org.apache.felix.https.keystore.key.password@TypeHint'] = params['org_apache_felix_https_keystore_key_password_type_hint']
        if 'org_apache_felix_https_truststore' in params:
            query_params['org.apache.felix.https.truststore'] = params['org_apache_felix_https_truststore']
        if 'org_apache_felix_https_truststore_type_hint' in params:
            query_params['org.apache.felix.https.truststore@TypeHint'] = params['org_apache_felix_https_truststore_type_hint']
        if 'org_apache_felix_https_truststore_password' in params:
            query_params['org.apache.felix.https.truststore.password'] = params['org_apache_felix_https_truststore_password']
        if 'org_apache_felix_https_truststore_password_type_hint' in params:
            query_params['org.apache.felix.https.truststore.password@TypeHint'] = params['org_apache_felix_https_truststore_password_type_hint']
        if 'org_apache_felix_https_clientcertificate' in params:
            query_params['org.apache.felix.https.clientcertificate'] = params['org_apache_felix_https_clientcertificate']
        if 'org_apache_felix_https_clientcertificate_type_hint' in params:
            query_params['org.apache.felix.https.clientcertificate@TypeHint'] = params['org_apache_felix_https_clientcertificate_type_hint']
        if 'org_apache_felix_https_enable' in params:
            query_params['org.apache.felix.https.enable'] = params['org_apache_felix_https_enable']
        if 'org_apache_felix_https_enable_type_hint' in params:
            query_params['org.apache.felix.https.enable@TypeHint'] = params['org_apache_felix_https_enable_type_hint']
        if 'org_osgi_service_http_port_secure' in params:
            query_params['org.osgi.service.http.port.secure'] = params['org_osgi_service_http_port_secure']
        if 'org_osgi_service_http_port_secure_type_hint' in params:
            query_params['org.osgi.service.http.port.secure@TypeHint'] = params['org_osgi_service_http_port_secure_type_hint']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_node_rw(self, path, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_node_rw(path, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path:  (required)
        :param str name:  (required)
        :param str add_members: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_node_rw_with_http_info(path, name, **kwargs)
        else:
            (data) = self.post_node_rw_with_http_info(path, name, **kwargs)
            return data

    def post_node_rw_with_http_info(self, path, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_node_rw_with_http_info(path, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path:  (required)
        :param str name:  (required)
        :param str add_members: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'name', 'add_members']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_node_rw" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params) or (params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `post_node_rw`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_node_rw`")

        resource_path = '/{path}/{name}.rw.html'.replace('{format}', 'json')
        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}
        if 'add_members' in params:
            query_params['addMembers'] = params['add_members']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_path(self, path, jcrprimary_type, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_path(path, jcrprimary_type, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path:  (required)
        :param str jcrprimary_type:  (required)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_path_with_http_info(path, jcrprimary_type, name, **kwargs)
        else:
            (data) = self.post_path_with_http_info(path, jcrprimary_type, name, **kwargs)
            return data

    def post_path_with_http_info(self, path, jcrprimary_type, name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_path_with_http_info(path, jcrprimary_type, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path:  (required)
        :param str jcrprimary_type:  (required)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'jcrprimary_type', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params) or (params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `post_path`")
        # verify the required parameter 'jcrprimary_type' is set
        if ('jcrprimary_type' not in params) or (params['jcrprimary_type'] is None):
            raise ValueError("Missing the required parameter `jcrprimary_type` when calling `post_path`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_path`")

        resource_path = '/{path}/'.replace('{format}', 'json')
        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']

        query_params = {}
        if 'jcrprimary_type' in params:
            query_params['jcr:primaryType'] = params['jcrprimary_type']
        if 'name' in params:
            query_params[':name'] = params['name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_query(self, path, p_limit, _1_property, _1_property_value, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_query(path, p_limit, _1_property, _1_property_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path:  (required)
        :param float p_limit:  (required)
        :param str _1_property:  (required)
        :param str _1_property_value:  (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_query_with_http_info(path, p_limit, _1_property, _1_property_value, **kwargs)
        else:
            (data) = self.post_query_with_http_info(path, p_limit, _1_property, _1_property_value, **kwargs)
            return data

    def post_query_with_http_info(self, path, p_limit, _1_property, _1_property_value, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_query_with_http_info(path, p_limit, _1_property, _1_property_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str path:  (required)
        :param float p_limit:  (required)
        :param str _1_property:  (required)
        :param str _1_property_value:  (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'p_limit', '_1_property', '_1_property_value']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params) or (params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `post_query`")
        # verify the required parameter 'p_limit' is set
        if ('p_limit' not in params) or (params['p_limit'] is None):
            raise ValueError("Missing the required parameter `p_limit` when calling `post_query`")
        # verify the required parameter '_1_property' is set
        if ('_1_property' not in params) or (params['_1_property'] is None):
            raise ValueError("Missing the required parameter `_1_property` when calling `post_query`")
        # verify the required parameter '_1_property_value' is set
        if ('_1_property_value' not in params) or (params['_1_property_value'] is None):
            raise ValueError("Missing the required parameter `_1_property_value` when calling `post_query`")

        resource_path = '/bin/querybuilder.json'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'path' in params:
            query_params['path'] = params['path']
        if 'p_limit' in params:
            query_params['p.limit'] = params['p_limit']
        if '_1_property' in params:
            query_params['1_property'] = params['_1_property']
        if '_1_property_value' in params:
            query_params['1_property.value'] = params['_1_property_value']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_tree_activation(self, ignoredeactivated, onlymodified, path, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_tree_activation(ignoredeactivated, onlymodified, path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool ignoredeactivated:  (required)
        :param bool onlymodified:  (required)
        :param str path:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_tree_activation_with_http_info(ignoredeactivated, onlymodified, path, **kwargs)
        else:
            (data) = self.post_tree_activation_with_http_info(ignoredeactivated, onlymodified, path, **kwargs)
            return data

    def post_tree_activation_with_http_info(self, ignoredeactivated, onlymodified, path, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_tree_activation_with_http_info(ignoredeactivated, onlymodified, path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool ignoredeactivated:  (required)
        :param bool onlymodified:  (required)
        :param str path:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ignoredeactivated', 'onlymodified', 'path']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tree_activation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ignoredeactivated' is set
        if ('ignoredeactivated' not in params) or (params['ignoredeactivated'] is None):
            raise ValueError("Missing the required parameter `ignoredeactivated` when calling `post_tree_activation`")
        # verify the required parameter 'onlymodified' is set
        if ('onlymodified' not in params) or (params['onlymodified'] is None):
            raise ValueError("Missing the required parameter `onlymodified` when calling `post_tree_activation`")
        # verify the required parameter 'path' is set
        if ('path' not in params) or (params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `post_tree_activation`")

        resource_path = '/etc/replication/treeactivation.html'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'ignoredeactivated' in params:
            query_params['ignoredeactivated'] = params['ignoredeactivated']
        if 'onlymodified' in params:
            query_params['onlymodified'] = params['onlymodified']
        if 'path' in params:
            query_params['path'] = params['path']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['aemAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
